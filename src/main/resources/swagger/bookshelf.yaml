swagger: "2.0"
info:
  description: "This is a sample Bookshelf server."
  version: "1.0.0"
  title: "Swagger Bookshelf"
  contact:
    email: "vasily.kumaev@gmail.com"
basePath: "/api"
tags:
- name: "book"
  description: "Everything about your Books"
- name: "reader"
  description: "Everything about your Readers"
schemes:
- "https"
- "http"
paths:
  /book:
    post:
      tags:
      - "book"
      summary: "Add a new book to the shelf"
      operationId: "addBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the shelf"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        201:
          description: "Created"
        405:
          description: "Invalid input"
        409:
          description: "Conflict"
  /book/{bookId}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a single boot"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
    put:
      tags:
      - "book"
      summary: "Updates a book in the shelf"
      operationId: "updateBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the shelf"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "book"
      summary: "Deletes a book"
      operationId: "deleteBook"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "Book id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
        409:
          description: "Conflict"
  /book/{bookId}/statistics:
    get:
      tags:
      - "book"
      summary: "Get book statistics by ID"
      description: "Returns a boot statistics"
      operationId: "getBookStatisticsById"
      produces:
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Statistics"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
  /book/findByAuthor:
    get:
      tags:
      - "book"
      summary: "Finds Books by author"
      operationId: "findBooksByAuthor"
      produces:
      - "application/json"
      parameters:
      - name: "author"
        in: "query"
        description: "Author value that need to be considered for filter"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid status value"
        404:
          description: "Book not found"
  /book/findByName:
    get:
      tags:
      - "book"
      summary: "Finds Book by name"
      description:  "Returns a single book for specified name"
      operationId: "findBookByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Name to filter by"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid tag value"
        404:
          description: "Book not found"
      deprecated: true
  /bookshelf/books:
    get:
      tags:
      - "bookshelf"
      summary: "Returns all books"
      operationId: "getBooks"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
  /bookshelf/readers:
    get:
      tags:
      - "bookshelf"
      summary: "Get all readers "
      operationId: "getReaders"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Reader"
  /bookshelf/borrow:
    post:
      tags:
      - "bookshelf"
      summary: "Borrow book to the shelf"
      operationId: "borrowBook"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for borrowing the book"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
        409:
          description: "Conflict"
  /bookshelf/return/{orderId}:
    post:
      tags:
      - "bookshelf"
      summary: "Return book to the shelf"
      operationId: "returnBook"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "Order id to return book to the self"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /reader:
    post:
      tags:
      - "reader"
      summary: "Create reader"
      operationId: "createReader"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created reader object"
        required: true
        schema:
          $ref: "#/definitions/Reader"
      responses:
        201:
          description: "Created"
        405:
          description: "Invalid input"
        409:
          description: "Conflict"
  /reader/{readerId}:
    get:
      tags:
      - "reader"
      summary: "Get reader by reader id"
      operationId: "getReaderById"
      produces:
      - "application/json"
      parameters:
      - name: "readerId"
        in: "path"
        description: "The id that needs to be fetched."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Reader"
        400:
          description: "Invalid readerId supplied"
        404:
          description: "Reader not found"
    put:
      tags:
      - "reader"
      summary: "Updated reader"
      operationId: "updateReader"
      produces:
      - "application/json"
      parameters:
      - name: "readerId"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated reader object"
        required: true
        schema:
          $ref: "#/definitions/Reader"
      responses:
        202:
          description: "Accepted"
        400:
          description: "Invalid reader supplied"
        404:
          description: "Reader not found"
    delete:
      tags:
      - "reader"
      summary: "Delete reader"
      description: "This can only be done by the logged in reader."
      operationId: "deleteReader"
      produces:
      - "application/json"
      parameters:
      - name: "readerId"
        in: "path"
        description: "The readerId that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Co content"
        400:
          description: "Invalid readerId supplied"
        404:
          description: "Reader not found"
        409:
          description: "Conflict"
  /reader/findByName:
    get:
      tags:
      - "reader"
      summary: "Finds Reader by name"
      description:  "Returns a single reader for specified name"
      operationId: "findReaderByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "Name to filter by"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Reader"
        400:
          description: "Invalid tag value"
      deprecated: true
definitions:
  Order:
    type: "object"
    required:
    - "readerId"
    - "bookId"
    properties:
      id:
        type: "integer"
        format: "int64"
      readerId:
        type: "integer"
        format: "int64"
      bookId:
        type: "integer"
        format: "int64"
      timeOrder:
        type: "integer"
        format: "int64"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Reader:
    type: "object"
    required:
    - "name"
    - "age"
    properties:
      id:
        type: "integer"
        format: "int64"
      age:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      email:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "Reader"
  Book:
    type: "object"
    required:
    - "name"
    - "author"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Crime and Punishment"
      author:
        type: "string"
        example: "Dostoevsky"
      year:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Book status in the shelf"
        enum:
        - "AVAILABLE"
        - "UNAVAILABLE"
        default: "AVAILABLE"
    xml:
      name: "Book"
  Statistics:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      popularity:
        type: "integer"
        format: "int64"
        default: "0"
      averageReadingTime:
        type: "integer"
        format: "int64"
        default: "0"
        description: "Specified in seconds"
    xml:
      name: "Statistics"